#pragma checksum "E:\githup\Vencerme\Vencer.me\Views\Ticketing\SupportExchanges.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "795ab7ad2a593329e150de5dbdb5ddaff731c431"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Ticketing_SupportExchanges), @"mvc.1.0.view", @"/Views/Ticketing/SupportExchanges.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\githup\Vencerme\Vencer.me\Views\_ViewImports.cshtml"
using Vencer.me;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\githup\Vencerme\Vencer.me\Views\_ViewImports.cshtml"
using Data.Dto.User;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\githup\Vencerme\Vencer.me\Views\_ViewImports.cshtml"
using Data.Dto.Customer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\githup\Vencerme\Vencer.me\Views\_ViewImports.cshtml"
using Data.Dto.Business;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\githup\Vencerme\Vencer.me\Views\_ViewImports.cshtml"
using Data.Dto.Payment;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\githup\Vencerme\Vencer.me\Views\_ViewImports.cshtml"
using Data.Dto.Permition;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\githup\Vencerme\Vencer.me\Views\_ViewImports.cshtml"
using Data.Dto.SupportExchanges;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\githup\Vencerme\Vencer.me\Views\_ViewImports.cshtml"
using Data.Dto.Vencoin;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"795ab7ad2a593329e150de5dbdb5ddaff731c431", @"/Views/Ticketing/SupportExchanges.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"aa51d1f44a53d1f5e4b4d512a78a04d457a9a881", @"/Views/_ViewImports.cshtml")]
    public class Views_Ticketing_SupportExchanges : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Kendo/kendo.aspnetmvc.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\githup\Vencerme\Vencer.me\Views\Ticketing\SupportExchanges.cshtml"
  
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<div class=""row page-titles"">
    <div class=""col p-md-0"">
        <h4>درخواست های واریز کاربران</h4>
    </div>
</div>
<div class=""row"">
    <div class=""col-xl-12"">
    <div class=""card button-card"">
        <div class=""card-body"">
        <div id=""SupportExchanges"" class=""k-rtl""></div>
        <hr style=""margin-top: 3rem;""/>

        <h4 style=""text-align: right; margin-bottom: 18px; margin-top: 18px;"">درخواست های تایید شده کاربران</h4>

        <div id=""SupportExchangesDone"" class=""k-rtl""></div>
    </div>
    </div>
    </div>
</div>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "795ab7ad2a593329e150de5dbdb5ddaff731c4315191", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script>
    $(function($) {
        SupportExchanges();

        function SupportExchanges() {
            $('#SupportExchanges').kendoGrid({
                dataSource: {
                    type: (function() {
                        if (kendo.data.transports[""aspnetmvc-ajax""]) {
                            return ""aspnetmvc-ajax""
                        } else {
                            throw new Error('The kendo.aspnetmvc.min.js script is not included.')
                        }
                    }),
                    transport: {
                        read: {
                            url: ""/api/ApiTicketing/GetSupportExchanges"",
                            headers: { 'Authorization': 'Bearer ' + getCookie('Bearer') }
                        }
                    },
                    pageSize: 20,
                    serverPage: true,
                    schema: {
                        data: ""data.data"",
                        total: ""data.total""
                    },
                ");
            WriteLiteral(@"    serverFiltering: true,
                    serverSorting: true,
                    ""filter"": []
                },
                height: 550,
                groupable: true,
                sortable: true,
                pageable: {
                    pageSizes: true,
                    buttonCount: 5
                },
                columns: [
                    {
                        field: ""Row"",
                        title: "" ردیف"",
                        width: 50
                    }, {
                        field: ""numberOfTicket"",
                        title: "" شماره تیکت"",
                        width: 100
                    }, {
                        field: ""amountOfExchange"",
                        title: "" مبلغ"",
                        width: 150
                    }, {
                        field: ""accountNumberOfBank"",
                        title: ""شماره کارت"",
                        width: 150
                    }, {
                        field: ""descript");
            WriteLiteral(@"ion"",
                        title: ""توضیحات"",
                        width: 150
                    }, {
                        template: ""#: templateFunction(data.registerDate ) #"",
                        field: ""registerDate"",
                        title: ""تاریخ واریز"",
                        width: 150
                    }, {
                        template: ""#: templateFunctionState(data.state ) # "",
                        field: ""state"",
                        title: ""وضعیت"",
                        width: 150
                    }, {
                        field: ""hasFile"",
                        title: ""فایل"",
                        width: 150
                    }, {
                        template:
                            '<div class=""social-icon""><a download type=""button"" style=""margin-left:3px;"" class=""btn  btn-success ""  href=#: templateFunctionDownloadFile(data.filePath )[0] #>ملی</a>' +
                                '<a download  type=""button"" style=""margin-bottom:2px;"" cla");
            WriteLiteral(@"ss=""btn  btn-success "" href=#: templateFunctionDownloadFile(data.filePath )[1] #>بانکی</a>' +
                                '<a download type=""button"" class=""btn  btn-success "" href=#: templateFunctionDownloadFile(data.filePath )[2] #>مدرک</a>  </div>',
                        field: ""filePath"",
                        title: ""دانلود فایل"",
                        width: 150
                    }, {
                        field: ""userId"",
                        title: ""ایدی کاربر"",
                        width: 150,
                        hidden: true
                    }, {
                        field: ""id"",
                        title: ""ایدی جدول"",
                        width: 150,
                        hidden: true
                    }, {
                        field: """",
                        title: ""عملیات"",
                        width: 150,
                        template:
                            '<button onclick=""btnReject(this)"" name=#:data.userId# idExchange=#: data.id # cla");
            WriteLiteral(@"ss=""btn btn-danger btn-ft btn-rounded btn-sm"" style=""margin-bottom: 5px;"">رد درخواست</button>' +
                                '<button onclick=""btnDone(this)""  name=#:data.userId# idExchange=#: data.id #  class=""btn btn-rounded btn-success btn-ft  btn-sm"">تایید نهایی</button>'


                    }
                ],
                dataBinding: function(a) {
                    var row = 0;
                    a.items.forEach(function(value) {
                        row++;
                        value.Row = ((a.sender.dataSource.page() - 1) * a.sender.dataSource.pageSize()) + row
                    })
                }
            });
        }

        $('#SupportExchangesDone').kendoGrid({
            dataSource: {
                type: (function() {
                    if (kendo.data.transports[""aspnetmvc-ajax""]) {
                        return ""aspnetmvc-ajax""
                    } else {
                        throw new Error('The kendo.aspnetmvc.min.js script is not included.')
              ");
            WriteLiteral(@"      }
                }),
                transport: {
                    read: {
                        url: ""/api/ApiTicketing/GetSupportExchangesByState?state=Done"",
                        headers: { 'Authorization': 'Bearer ' + getCookie('Bearer') }
                    }
                },
                pageSize: 20,
                serverPage: true,
                schema: {
                    data: ""data.data"",
                    total: ""data.total""
                },
                serverFiltering: true,
                serverSorting: true,
                ""filter"": []
            },
            height: 550,
            groupable: true,
            sortable: true,
            pageable: {
                pageSizes: true,
                buttonCount: 5
            },
            columns: [
                {
                    field: ""Row"",
                    title: "" ردیف"",
                    width: 50
                }, {
                    field: ""numberOfTicket"",
                    titl");
            WriteLiteral(@"e: "" شماره تیکت"",
                    width: 100
                }, {
                    field: ""amountOfExchange"",
                    title: "" مبلغ"",
                    width: 150
                }, {
                    field: ""accountNumberOfBank"",
                    title: ""شماره کارت"",
                    width: 150
                }, {
                    field: ""description"",
                    title: ""توضیحات"",
                    width: 150
                }, {
                    template: ""#: templateFunction(data.registerDate ) #"",
                    field: ""registerDate"",
                    title: ""تاریخ واریز"",
                    width: 150
                }, {
                    template: ""#: templateFunctionState(data.state ) # "",
                    field: ""state"",
                    title: ""وضعیت"",
                    width: 150
                }
            ],
            dataBinding: function(a) {
                var row = 0;
                a.items.forEach(function(value) {
    ");
            WriteLiteral(@"                row++;
                    value.Row = ((a.sender.dataSource.page() - 1) * a.sender.dataSource.pageSize()) + row
                })
            }
        });
    });
    function templateFunction(value) {
        value.toString();
        var data = new Date(value).toLocaleDateString('fa-IR');
        var time = new Date(value).toLocaleTimeString('fa-IR');
        return time + ' ' + data
    }

    function templateFunctionState(value) {
        switch (parseInt(value)) {
            case 0:
                return ""درحال بررسی فایل"";
            case 1:
                return ""درحال انجام"";
            case 2:
                return ""رد شده توسط کاربر"";
            case 3:
                return ""رد شده توسط مدیر"";
            case 4:
                return ""تایید نهایی"";
            default:
                return ""نا مشخص"";
        }
    }

    function templateFunctionDownloadFile(value) {
        var paths = [];
        var list = JSON.parse(value);
        $.each(list,
            functi");
            WriteLiteral(@"on (index, data) {
                paths.push(data.Path);
            });
        return paths;
    }

    function btnReject(e) {
        debugger;
        $.ajax({
            url: '/api/ApiTicketing/UpdateSupportExchanges',
            type: 'Post',
            headers: { 'Authorization': 'Bearer ' + getCookie('Bearer') },
            data: {
                State: 'CancelByAdmin',
                IdExchange: $(e).attr('idExchange'),
                UserId: e.name,
                Description: 'مدارک ناقص است'
            },
            success: function (response) {
                console.log(response);
                if (response.isSuccess) {
                    gritterNotification('success', 'موفق', response.message);
                    SupportExchanges();
                } else {
                    disabledBtn('btnFormExchange', false)
                    gritterNotification('error', 'خطا', response.message);
                }
            },
            error: function (xhr) {
                disab");
            WriteLiteral(@"ledBtn('btnFormExchange', false)
                console.log(xhr);;
                gritterNotification('error', xhr.responseJSON.Message);
            }
        });
    }

    function btnDone(e) {
        debugger;
        $.ajax({
            url: '/api/ApiTicketing/UpdateSupportExchanges',
            type: 'Post',
            headers: { 'Authorization': 'Bearer ' + getCookie('Bearer') },
            data: {
                State: 'Done',
                IdExchange: $(e).attr('idExchange'),
                UserId: e.name,
                Description: 'تایید جهت واریز'
            },
            success: function (response) {
                console.log(response);
                if (response.isSuccess) {
                    gritterNotification('success', 'موفق', response.message);
                    SupportExchanges();
                } else {
                    disabledBtn('btnFormExchange', false)
                    gritterNotification('error', 'خطا', response.message);
                }
            ");
            WriteLiteral("},\n            error: function (xhr) {\n                disabledBtn(\'btnFormExchange\', false)\n                console.log(xhr);;\n                gritterNotification(\'error\', xhr.responseJSON.Message);\n            }\n        });\n    }\n</script>\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
